{
    "Groups": [
        {
            "UniqueId": "Group-1",
            "Title": "Group Title: 1",
            "Subtitle": "Group subtitle: 1",
            "ImagePath": "Assets/DarkGray.png",
            "Description": "Group Description: group description",
            "Items": [
                {
                    "UniqueId": "Group-1-Item-1",
                    "Title": "MiVoice",
                    "Subtitle": "Item Subtitle: 1",
                    "ImagePath": "Assets/MiVoice_V1.jpg",
                    "Description": "Item Description: description",
                    "Content": "Loading..."
                },
                {
                    "UniqueId": "Group-1-Item-2",
                    "Title": "Osmosis-Mindtree",
                    "Subtitle": "Item Subtitle: 2",
                    "ImagePath": "Assets/Osmosis-Mindtree.jpg",
                    "Description": "description",
                    "Content": "Loading..."
                },
                {
                    "UniqueId": "Group-1-Item-3",
                    "Title": "Konnect-360",
                    "Subtitle": "Item Subtitle: 3",
                    "ImagePath": "Assets/Konnect-360.jpg",
                    "Description": "description",
                    "Content": "Loading..."
                },
                {
                    "UniqueId": "Group-1-Item-4",
                    "Title": "Know Your Leader",
                    "Subtitle": "Item Subtitle: 4",
                    "ImagePath": "Assets/KnowYourLeader-Kamran.jpg",
                    "Description": "description",
                    "Content": "Loading..."
                },
                {
                    "UniqueId": "Group-1-Item-5",
                    "Title": "Kalinga",
                    "Subtitle": "Item Subtitle: 5",
                    "ImagePath": "Assets/Kalinga-Rises.jpg",
                    "Description": "description",
                    "Content": "Loading..."
                },
                {
                    "UniqueId": "Group-1-Item-6",
                    "Title": "Water-Cooler-Chatter",
                    "Subtitle": "Item Subtitle: 6",
                    "ImagePath": "Assets/Water-Cooler-Chatter.jpg",
                    "Description": "description",
                    "Content": "Loading..."
                },
                {
                    "UniqueId": "Group-1-Item-7",
                    "Title": "Appraisal",
                    "Subtitle": "Item Subtitle: 7",
                    "ImagePath": "Assets/appraisal.jpg",
                    "Description": "description",
                    "Content": "Loading..."
                },
                {
                    "UniqueId": "Group-1-Item-8",
                    "Title": "Sales",
                    "Subtitle": "Item Subtitle: 8",
                    "ImagePath": "Assets/Sales.jpg",
                    "Description": "description",
                    "Content": "Loading..."
                }
            ]
        },
        {
            "UniqueId": "Group-2",
            "Title": "RT @SamanthaRist: Some of Mindtree Florida's Outstanding Performers 2013_2014! Congratulations!  http://t.co/SEXzuehz30 @Mindtree_Ltd @Mindt…",
            "Subtitle": "Group subtitle: 2",
            "ImagePath": "Assets/LightGray.png",
            "Description": "Group Description: ",
            "Items": [
                {
                    "UniqueId": "Group-2-Item-1",
                    "Title": "RT @SamanthaRist: Some of Mindtree Florida's Outstanding Performers 2013_2014! Congratulations!  http://t.co/SEXzuehz30 @Mindtree_Ltd @Mindt…",
                    "Subtitle": "Item Subtitle: 1",
                    "ImagePath": "Assets/DarkGray.png",
                    "Description": "description",
                    "Content": "content"
                },
                {
                    "UniqueId": "Group-2-Item-2",
                    "Title": "Mindtree Implements @CMS solution for a leading @FMCG retailer. Result: Increased avg. time spent on site @Digital http://t.co/L3yEOXIzxd",
                    "Subtitle": "Item Subtitle: 2",
                    "ImagePath": "Assets/MediumGray.png",
                    "Description": "Item Description: ",
                    "Content": "content"
                },
                {
                    "UniqueId": "Group-2-Item-3",
                    "Title": "Mindtree transforms IT & reduces 44% maintenance cost for an @AssetManagement enterprise @ITinfrastructure http://t.co/FqOSHswOxH",
                    "Subtitle": "Item Subtitle: 3",
                    "ImagePath": "Assets/LightGray.png",
                    "Description": "Item Description: content",
                    "Content": "content"
                }
            ]
        },
        {
            "UniqueId": "Group-3",
            "Title": "Tech Blogs",
            "Subtitle": "Group subtitle: 3",
            "ImagePath": "Assets/MediumGray.png",
            "Description": "Group Description: ",
            "Items": [
                {
                    "UniqueId": "Group-3-Item-1",
                    "Title": "Team Explorer Everywhere",
                    "Subtitle": "Visual Studio Team Foundation Server is good for developers who has a Visual Studio license. This is a statement I…",
                    "ImagePath": "Assets/teamexplorer.png",
                    "Description": "",
                    "Content": "<para>Visual Studio Team Foundation Server is good for developers who has a Visual Studio license” . This is a statement I came to hear recently. With the latest developments in Microsoft technology stack, I would say, this is absolutely wrong. Microsoft has come up with free, lightweight and cross platform client side tools that gives the same out of the box features as in Visual Studio.</para>@<para>Regarding version control, there is one more thing people discuss about a lot- Which version system control to choose. Git is very popular among open source teams and they would like to continue using that. In TFS 2013 two version control systems that the teams can choose from- Git and Team foundation Version Control. Teams have the freedom to choose their version control system within TFS.@<img>Assets\\tfs1.png</img>@<para>What about the license? Obviously, for installing and using TFS on premise a license has to be purchased. I am working on a very small project I can’t afford to install and configure a TFS server on premise, what to do? There is something called Visual Studio Online. It is online home for development projects. More information is available here .Visual Studio Online is free if you have a MSDN subscription.</para>@<para>In an enterprise scenario, where the organization already has Visual Studio Online or on premise, there will be a lot of projects running with different teams using different IDEs and platforms. There is an assumption that TFS can be used only through Visual Studio, which is wrong. It can be used from almost everywhere, without paying for a Visual Studio license. The word ‘almost’ is not really necessary there. Below is a diagram on ‘Adapting TFS Everywhere’ from MSDN documentation.</para>@<img>Assets\\teamexplorer.png</img>@<para>If the developers are using Windows OS in their development machines, they can use Team explorer for Visual Studio free of cost. Team explorer is the client software for TFS that comes with newer versions of Visual Studio. Same client is available separately. It is available for download from Microsoft website. This one runs within the same Visual Studio 2013 Shell. After installation, you can find a Visual Studio installation with the team explorer feature. You can see the following information in Visual Studio ‘About’ screen.</para>@<img>Assets\\tfs3.png</img>@<para>Following screenshot shows the Source control explorer window. You can see that all the options are available.</para>@<img>Assets\\tfs4.png</img>@<para>If the developers are using Eclipse as their IDE, they need not install this team explorer for visual studio. There is another tool called ‘Microsoft Team Explorer Everywhere’. Team Explorer Everywhere includes the Eclipse plug-in and the cross-platform, command-line client for Visual Studio Team Foundation Server 2010, 2012, 2013 and Visual Studio Online. Visit Microsoft Team Explorer Everywhere Download page to for more details.</para>@<para>Following screenshot is from a Linux machine (Ubuntu 14.04 LTS). As you can see, with the Team explorer plugin, all the options are available in Eclipse also</para>@<img>tfs5.png</img>@<para>Following screenshot shows the command line features available in the cross platform, command line tool. All the options available in Team explorer are available in the command line client also. The Microsoft team explorer everywhere download page has listed down the steps for installing and configuring the client.</para>@<img>Assets\\tfs6.png</img>"
                },

                {
                    "UniqueId": "Group-3-Item-2",
                    "Title": "Package creation and side loading for WinRT 8.1",
                    "Subtitle": "This article is divided into two parts - creating the Windows 8.1 Application package and the installation of the same.…",
                    "ImagePath": "Assets/package.jpg",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\package.jpg</img>@<para>This article is divided into two parts – creating the Windows 8.1 Application package and the installation of the same.</para>@<para>1. Package creation:</para>@<para>The package can be created right from the Visual Studio or from the command prompt. We will have a look at both the approaches.</para>@<para>Step 1: Build the project/solution under “Release” mode, and then right click on the WinRT project. From the Context menu select “Create App Packages…” under the menu item “Store”. This will open a wizard interface to create a package.</para>@<img>Assets\\pc1.png</img>@<para>Step 2: Choose the appropriate option as per your needs. I’ll be demonstrating on the side loading of the apps, so we aren’t uploading the app to the windows store.</para>@<img>Assets\\pc2.png</img>@<para>Step 3: Verify the version number, Output location and the architecture and hit on “Create” button.</para>@<img>Assets\\pc3.png</img>@<para>Step 4: Once the package is created, you’ll see the below screen with the hyperlinked output location. As an optional step, you can launch the WACK for verifying the package created against the Windows Store rules.</para>@<img>Assets\\pc4.png</img>@<para>The build will be placed under the drop location as:</para>@<img>Assets\\pc5.png</img>@<para>Package any application base data (if any) and ship the package for installation.</para>@<para>If you’re command prompt user, it is much simpler! Just use the below command in your Visual Studio Developer Command Prompt</para>@<para>msbuild //t:Rebuild //p:Configuration=Release;appxPackageDir=<DROP LOCATION> <SOLUTION_FILENAME></para>@<para>For instance, msbuild //t:Rebuild //p:Configuration=Release;appxPackageDir=C:\\Temp_Releases\\ TheHubApp.sln</para>@<para>The build will be placed under the drop location you specify in the command.</para>@<para>2. Side-loading on WinRT 8.1 machine:</para>@<para>For installing the build obtained from the previous section, you can perform the below actions:</para>@<para>Step 1: Uninstall the application on the target machine, if it is already installed.</para>@<para>Step 2: Copy the build package into the target device. Run the “Add-AppDevPackage.ps1″ in administrator mode of the PowerShell console.</para>@<para>Step 3: PowerShell console might prompt you to enter install the certificate/login to your Windows Developer account; performing the necessary actions will resume the installation. Upon installation is successful, you can see similar contents in the PowerShell console.</para>@<img>Assets\\pc6.png</img>@<para>Step 4: Now you can access the installed application either by the Apps screen or by using the Search.</para>@<img>Assets\\pc7.png</img>@<para>Another method of side loading which avoids the developer license (involves group policy and registry edits along with the product key of the OS) requirement is detailed at http://blogs.msdn.com/b/micham/archive/2014/05/30/sideloading-store-apps-to-windows-8-1-devices.aspx </para>"
                },
                {
                    "UniqueId": "Group-3-Item-3",
                    "Title": "Capturing Analytics in WinRT",
                    "Subtitle": "Since there are no analytics engine (stable versions) built for WinRT (8/8.1); we had a requirement to develop a custom…",
                    "ImagePath": "Assets/Capturing-Analytics-in-WinRT.png",
                    "Description": "Item Description: ",
                    "Content": "<para>Since there are no analytics engine (stable versions) built for WinRT (8/8.1); we had a requirement to develop a custom analytics capturing engine. The initial details were very vague just to detail about the capturing some metrics about usage of the application. Later it was detailed into get the flow of the complete business transaction(s), user activities on the tablet, and even assessing the performance of a page/screen. These data needs to be available for an admin to produce a report and help in finding any performance related problems.</para>@<para>How we implemented?</para>@<para>Since the data doesn’t need to show the metrics to the end user, there were no need to add an admin/report screen to the application. We had just to capture the data and sync with a central database. Now, a service was introduced to get this metrics and push to the central database, from which an admin console will be able to project a graph/report to the Admin. At the application end, now we had to capture all the user activities and send them to the server – which ends up in lots and lots of web calls. Instead of sending data at granular level, these metrics were grouped together based on their event types, and aggregated periodically (for instance – aggregate all events of Home Screen Load time). These aggregated info is then synced to the services periodically – preferably once/twice a day.</para>@<img>Assets\\Capturing-Analytics-in-WinRT.png</img>@<para>As depicted in the above picture, the metrics will be captured for every user actions in real time, these will get aggregated (and averaged) and moved to Aggregated metrics. These will be periodically saved onto file system and synchronized with the service/server. The sync process will be done by another thread/timer based on its settings.</para>@<para>Best possible way to implement these kind of scenarios to use background processes. But as there is a limitation on the timer value (15 mins at the minimum) which can be set to run this process, we used the usual Timer instances; which usually prone to performance problems over time.</para>@<para>This entire implementation and usage is available at http://microsoftcoe.mindtree.com/reuse/packages/kpi/ </para>"
                },
                {
                    "UniqueId": "Group-3-Item-4",
                    "Title": "C#6 Features & Visual Studio 2015",
                    "Subtitle": "Microsoft released .NET 2015 Preview on 12th November 2014 and called it a New Era of .Net as it embraces…",
                    "ImagePath": "Assets/csharp.jpg",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\csharp.jpg</img>@<para>Microsoft released .NET 2015 Preview on 12th November 2014 and called it a New Era of .Net as it embraces open source as a core principal and enables .NET applications to run on multiple operating systems (net on Mac and Linux). It’s the most important announcement in the IT industry since years and maybe even the most impacting one for the coming years in the future. The .NET Compiler platform, codenamed “Roslyn”, is a completely open source platform. “Roslyn” is a new experimental compilers for .Net which adds dynamic compilation and interactive development capabilities to C# and Visual Basic. C# specific features are implemented entirely in the compiler, without any dependency on an updated Microsoft .NET Framework or runtime.</para>@<para>For a couple of weeks I have been exploring on C# 6 features and Visual Studio IDE improvements and its experience in VS2014 CTP (Community Technology Preview) and now in VS2015 after its preview release. Most of the features released in VS2014 CTP are working in VS2015 except for a few maybe features. Still there are many exciting features which makes C# developer’s life much better, easier and makes coding more of a fun.</para>@<para>Just to give the flavor of the new features, I have tried to sum up few points with code snippets in here.</para>@<para>Rich IDE  and Editing Improvements</para>@<para>The new IDE is modern and enhanced with new colorized tooltip, parameter help, which makes the code look much neater and colorful. The new light bulb, the home for the quick actions to operate code fixes and refactoring.</para>@<para>Ex: Remove unused using’s, suggesting code fixes, Implementing interfaces, etc. are the examples of code fixing suggestions offered by the light bulb.</para>@<para>Below snap shows the colorized tool tip and code fixing suggestion by the light bulb.</para>@<img>Assets\\cs1.png</img>@<para>Ex: Refactoring examples include Introduce local, Introduce inline variable, Extract method, and smart renaming features.</para>@<img>Assets\\cs2.png</img>@<para>IDE improvement also extends its support for LINQ and Lambda expressions in Watch and Immediate windows, which is of great help.</para>@<para>C# 6 Features</para>@<para>Coming to C#, the bread and butter of the developers like us, it’s a good news that a lot of language improvements has been brought in with this version release.  Several new C# features reduce a lot of boilerplate code and clutter in everyday code.</para>@<para>Auto-properties Initializers – Auto-properties can be initialized and they no longer require setters. So we can have getter only properties making it read-only.</para>@<img>Assets\\cs3.png</img>@<para>NULL Propagation – Null-conditional operator one of my favorite feature, which helps you avoid getting the most common “NullReferenceException”. This operator (“?.” and “?[].”) gives you a built-in null check while accessing and invoking members and indexers. The null-conditional operator conditionally checks for null before invoking the target method and any additional method within the call chain.</para>@<para>Ex:</para>@<img>Assets\\cs4.png</img>@<para>Expression Bodied Properties and Expression Bodied Functions – Properties and methods can now have a single expression as their body, just like lambdas.</para>@<img>Assets\\cs5.png</img>@<para>String interpolation - String interpolation provides a concise way of describing string templates that insert expressions into format strings.</para>@<img>Assets\\cs6.png</img>@<para>Nameof parameter – It provides a refactoring-safe way of getting the name of a parameter, member or type as a string.</para>@<img>Assets\\cs7.png</img>@<para>Dictionary and Index member Initializer – You can now initialize a Dictionary object and any object supporting an Indexer as a property at specific index.</para>@<img>Assets\\cs8.png</img>@<para>Using Static – Using clauses for static classes bring their static members directly into scope, so you can call for example WriteLine() or Sqrt() without prefixing with the class name.</para>@<img>Assets\\cs9.png</img>@<para>Exception filters – Now you have the choice to look at an exception and decide whether to catch it with a given catch block.</para>@<para>Await inside catch and finally block – Await now works in catch and finally blocks, obviating some very tricky workarounds.</para>@<img>Assets\\cs10.png</img>@<para>Most of these above features are promised to be available for VB.Net as well in the final release, so that they could bring C# and VB.Net languages much closer. Apart from this, there are many more improvements in areas like debugging, Entity framework, Unit testing where, smart Unit testing capabilities with Pex technology, etc., are part of .Net 2015 preview or promised for later releases. I wish if I could include all of the available features here and show it with examples but I have briefly explained the few main ones, however you can download it from here and you can start playing with it and explore more features which the .Net 2015 provides.</para>@<para>References:</para>@<para>http://www.visualstudio.com/en-us/news/vs2015-preview-vs@VSIDE http://www.visualstudio.com/en-us/news/vs2015-preview-vs@ManLang http://blogs.msdn.com/b/visualstudio/archive/2014/11/12/the-c-and-visual-basic-code-focused-ide-experience.aspx </para>"
                },

                {
                    "UniqueId": "Group-3-Item-5",
                    "Title": "CASE STUDY: HYBRID CLOUD WINDOWS 8 APPLICATION",
                    "Subtitle": "A leading food manufacturing and supply company has existing mobile/tablet application that will be carried by sales representatives when they…",
                    "ImagePath": "Assets/Cloud.png",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\Cloud.png</img>@<para>A leading food manufacturing and supply company has existing mobile/tablet application that will be carried by sales representatives when they meet customers. This application’s main purpose is to get daily updated deals/offers/innovations from the company, customized deals to that particular sales reprehensive and by specific stores assigned to a sales representative. Those deals/offers/innovations can be offered by sales representative when meeting and discussing with his customers.</para>@<para>Problem description/ scope of study:</para>@<para>This application had been developed for windows mobile/tablet as windows store LOB application. Backend data services and data store is on azure with services exposed as an OData services. As the company operations are vast, the daily updates to deals are huge in number. Currently, the implementation is to sync to an offline storage on mobile/tablet’s SQLite database store.</para>@<para>To sync the local storage with all deals and offers from server, and to work offline, app has to make a lot of OData service calls more than 1000 at times. So, usually the syncing time is very long from minimum 60 minutes to several hours.  Due to the long delay sales representatives stayed away from using the application due to which resulted in loosing potential business or not getting much benefit out of the application to improve business.</para>@<para>So, our main task was to make the syncing time low, the usage of application by sales representatives will increase and helps in growth of the company marketing.</para>@<para>Current solution:</para>@<para>The existing architecture can be depicted as shows in the below diagram.</para>@<img>Assets\\hc1.png</img>@<para>Authentication is done with Azure ACS. On success the app on mobile/tablet device makes calls on OData service endpoints, to fetch all the data and then construct local database in SQLite. It completely builds local database for all the deals/offers/innovations. The construction of local DB takes lot of time as it need to go through lot of OData service calls at least minimum to 1000.</para>@<para>Solution implemented:</para>@<para>Solution to core problem:</para>@<para>As a first step, we have moved the task of building SQLite DB from mobile/tablet device to server side. Instead of creating the SQLite DB in mobile/tablet device app, we are now creating it on the server. To construct this, a new “worker role on azure” has been developed. This “worker role” will monitor an Azure queue for messages. Each messages in the queue consists of an employee ID of a sales representative. When a new message comes into the queue, the “worker role” will use the employee ID in the message and builds a SQLite DB which consists all the data regarding promotions/innovations/deals related to the sales representative. Further the SQLite DB is compressed and stored in “Azure Blob storage” (Private account). The queue that the worker role uses is populated by another “worker role” which pushes messages for all the active sales representatives. Hence this process will create a SQLite file for all of the Sales representative. This will speed up the process as the mobile/table application will just have to download SQLite DB and used to for further processing.</para>@<para>Additional things implemented other than core solution:</para>@<para>Security</para>@<para>With this new design to solve the problem, we entered in to an issue with security to specify how an account will download the SQLite data file from “Blog storage on Azure”, and to restrict any other users download someone else’s files. We need to secure and restrict it to each sales representative. To solve the problem, we made it mandatory to send some security token from mobile/tablet app along with request. The SAS (service to issue and authenticated security tokens) have been kept in place to issue security tokens. We have enforced business rules to specify who can access which file through SAS.  When mobile requesting for a file blob file, it sends the security token.</para>@<para>Monitoring and alerts for exceptions and logs</para>@<para>Exceptions from all areas of the application were logged and kept in two storages. 1. Azure AWD tables 2. Queue. The queue will be monitored by a “Worker Role on Azure” to checks important and alert-able exceptions/logs. If worker role finds any such expectations/logs, it logs to Azure AWD table and will periodically sends report to admin as configured.</para>@<img>Assets\\hc2.png</img>@<para>Major components developed/used on azure for new solution:</para>@<para>Worker Role – to create SQLite data files, populate the queue</para>@<para>Azure Queue for parallel processing</para>@<para>Blob storage</para>@<para>SAS (Shared Access Signature) service</para>@<para>Queue for exception messages and logs</para>@<para>Worker Role – to monitor exception messages queue and alerting admin.</para>@<para>Observations as a success factor:</para>@<para>The redesign of the application reduced the sync time considerable. Scalability increased as the application was designed to scale with help of Azure. Complete potential of Azure PAAS offering was tapped to achieve optimal performance. Robustness was imparted to the system with integrated monitoring and logging and also by code refactoring. The application and the overall system had become more reliable and predictable with help of the alerts</para>"
                }
            ]
        },
        {
            "UniqueId": "Group-4",
            "Title": "News",
            "Subtitle": "Group subtitle: 3",
            "ImagePath": "Assets/MediumGray.png",
            "Description": "Group Description: ",
            "Items": [

                {
                    "UniqueId": "Group-3-Item-1",
                    "Title": "Team Explorer Everywhere",
                    "Subtitle": "Visual Studio Team Foundation Server is good for developers who has a Visual Studio license. This is a statement I…",
                    "ImagePath": "Assets/teamexplorer.png",
                    "Description": "",
                    "Content": "<para>Visual Studio Team Foundation Server is good for developers who has a Visual Studio license” . This is a statement I came to hear recently. With the latest developments in Microsoft technology stack, I would say, this is absolutely wrong. Microsoft has come up with free, lightweight and cross platform client side tools that gives the same out of the box features as in Visual Studio.</para>@<para>Regarding version control, there is one more thing people discuss about a lot- Which version system control to choose. Git is very popular among open source teams and they would like to continue using that. In TFS 2013 two version control systems that the teams can choose from- Git and Team foundation Version Control. Teams have the freedom to choose their version control system within TFS.@<img>Assets\\tfs1.png</img>@<para>What about the license? Obviously, for installing and using TFS on premise a license has to be purchased. I am working on a very small project I can’t afford to install and configure a TFS server on premise, what to do? There is something called Visual Studio Online. It is online home for development projects. More information is available here .Visual Studio Online is free if you have a MSDN subscription.</para>@<para>In an enterprise scenario, where the organization already has Visual Studio Online or on premise, there will be a lot of projects running with different teams using different IDEs and platforms. There is an assumption that TFS can be used only through Visual Studio, which is wrong. It can be used from almost everywhere, without paying for a Visual Studio license. The word ‘almost’ is not really necessary there. Below is a diagram on ‘Adapting TFS Everywhere’ from MSDN documentation.</para>@<img>Assets\\teamexplorer.png</img>@<para>If the developers are using Windows OS in their development machines, they can use Team explorer for Visual Studio free of cost. Team explorer is the client software for TFS that comes with newer versions of Visual Studio. Same client is available separately. It is available for download from Microsoft website. This one runs within the same Visual Studio 2013 Shell. After installation, you can find a Visual Studio installation with the team explorer feature. You can see the following information in Visual Studio ‘About’ screen.</para>@<img>Assets\\tfs3.png</img>@<para>Following screenshot shows the Source control explorer window. You can see that all the options are available.</para>@<img>Assets\\tfs4.png</img>@<para>If the developers are using Eclipse as their IDE, they need not install this team explorer for visual studio. There is another tool called ‘Microsoft Team Explorer Everywhere’. Team Explorer Everywhere includes the Eclipse plug-in and the cross-platform, command-line client for Visual Studio Team Foundation Server 2010, 2012, 2013 and Visual Studio Online. Visit Microsoft Team Explorer Everywhere Download page to for more details.</para>@<para>Following screenshot is from a Linux machine (Ubuntu 14.04 LTS). As you can see, with the Team explorer plugin, all the options are available in Eclipse also</para>@<img>tfs5.png</img>@<para>Following screenshot shows the command line features available in the cross platform, command line tool. All the options available in Team explorer are available in the command line client also. The Microsoft team explorer everywhere download page has listed down the steps for installing and configuring the client.</para>@<img>Assets\\tfs6.png</img>"
                },

                {
                    "UniqueId": "Group-3-Item-5",
                    "Title": "CASE STUDY: HYBRID CLOUD WINDOWS 8 APPLICATION",
                    "Subtitle": "A leading food manufacturing and supply company has existing mobile/tablet application that will be carried by sales representatives when they…",
                    "ImagePath": "Assets/Cloud.png",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\Cloud.png</img>@<para>A leading food manufacturing and supply company has existing mobile/tablet application that will be carried by sales representatives when they meet customers. This application’s main purpose is to get daily updated deals/offers/innovations from the company, customized deals to that particular sales reprehensive and by specific stores assigned to a sales representative. Those deals/offers/innovations can be offered by sales representative when meeting and discussing with his customers.</para>@<para>Problem description/ scope of study:</para>@<para>This application had been developed for windows mobile/tablet as windows store LOB application. Backend data services and data store is on azure with services exposed as an OData services. As the company operations are vast, the daily updates to deals are huge in number. Currently, the implementation is to sync to an offline storage on mobile/tablet’s SQLite database store.</para>@<para>To sync the local storage with all deals and offers from server, and to work offline, app has to make a lot of OData service calls more than 1000 at times. So, usually the syncing time is very long from minimum 60 minutes to several hours.  Due to the long delay sales representatives stayed away from using the application due to which resulted in loosing potential business or not getting much benefit out of the application to improve business.</para>@<para>So, our main task was to make the syncing time low, the usage of application by sales representatives will increase and helps in growth of the company marketing.</para>@<para>Current solution:</para>@<para>The existing architecture can be depicted as shows in the below diagram.</para>@<img>Assets\\hc1.png</img>@<para>Authentication is done with Azure ACS. On success the app on mobile/tablet device makes calls on OData service endpoints, to fetch all the data and then construct local database in SQLite. It completely builds local database for all the deals/offers/innovations. The construction of local DB takes lot of time as it need to go through lot of OData service calls at least minimum to 1000.</para>@<para>Solution implemented:</para>@<para>Solution to core problem:</para>@<para>As a first step, we have moved the task of building SQLite DB from mobile/tablet device to server side. Instead of creating the SQLite DB in mobile/tablet device app, we are now creating it on the server. To construct this, a new “worker role on azure” has been developed. This “worker role” will monitor an Azure queue for messages. Each messages in the queue consists of an employee ID of a sales representative. When a new message comes into the queue, the “worker role” will use the employee ID in the message and builds a SQLite DB which consists all the data regarding promotions/innovations/deals related to the sales representative. Further the SQLite DB is compressed and stored in “Azure Blob storage” (Private account). The queue that the worker role uses is populated by another “worker role” which pushes messages for all the active sales representatives. Hence this process will create a SQLite file for all of the Sales representative. This will speed up the process as the mobile/table application will just have to download SQLite DB and used to for further processing.</para>@<para>Additional things implemented other than core solution:</para>@<para>Security</para>@<para>With this new design to solve the problem, we entered in to an issue with security to specify how an account will download the SQLite data file from “Blog storage on Azure”, and to restrict any other users download someone else’s files. We need to secure and restrict it to each sales representative. To solve the problem, we made it mandatory to send some security token from mobile/tablet app along with request. The SAS (service to issue and authenticated security tokens) have been kept in place to issue security tokens. We have enforced business rules to specify who can access which file through SAS.  When mobile requesting for a file blob file, it sends the security token.</para>@<para>Monitoring and alerts for exceptions and logs</para>@<para>Exceptions from all areas of the application were logged and kept in two storages. 1. Azure AWD tables 2. Queue. The queue will be monitored by a “Worker Role on Azure” to checks important and alert-able exceptions/logs. If worker role finds any such expectations/logs, it logs to Azure AWD table and will periodically sends report to admin as configured.</para>@<img>Assets\\hc2.png</img>@<para>Major components developed/used on azure for new solution:</para>@<para>Worker Role – to create SQLite data files, populate the queue</para>@<para>Azure Queue for parallel processing</para>@<para>Blob storage</para>@<para>SAS (Shared Access Signature) service</para>@<para>Queue for exception messages and logs</para>@<para>Worker Role – to monitor exception messages queue and alerting admin.</para>@<para>Observations as a success factor:</para>@<para>The redesign of the application reduced the sync time considerable. Scalability increased as the application was designed to scale with help of Azure. Complete potential of Azure PAAS offering was tapped to achieve optimal performance. Robustness was imparted to the system with integrated monitoring and logging and also by code refactoring. The application and the overall system had become more reliable and predictable with help of the alerts</para>"
                },


                {
                    "UniqueId": "Group-3-Item-3",
                    "Title": "Capturing Analytics in WinRT",
                    "Subtitle": "Since there are no analytics engine (stable versions) built for WinRT (8/8.1); we had a requirement to develop a custom…",
                    "ImagePath": "Assets/Capturing-Analytics-in-WinRT.png",
                    "Description": "Item Description: ",
                    "Content": "<para>Since there are no analytics engine (stable versions) built for WinRT (8/8.1); we had a requirement to develop a custom analytics capturing engine. The initial details were very vague just to detail about the capturing some metrics about usage of the application. Later it was detailed into get the flow of the complete business transaction(s), user activities on the tablet, and even assessing the performance of a page/screen. These data needs to be available for an admin to produce a report and help in finding any performance related problems.</para>@<para>How we implemented?</para>@<para>Since the data doesn’t need to show the metrics to the end user, there were no need to add an admin/report screen to the application. We had just to capture the data and sync with a central database. Now, a service was introduced to get this metrics and push to the central database, from which an admin console will be able to project a graph/report to the Admin. At the application end, now we had to capture all the user activities and send them to the server – which ends up in lots and lots of web calls. Instead of sending data at granular level, these metrics were grouped together based on their event types, and aggregated periodically (for instance – aggregate all events of Home Screen Load time). These aggregated info is then synced to the services periodically – preferably once/twice a day.</para>@<img>Assets\\Capturing-Analytics-in-WinRT.png</img>@<para>As depicted in the above picture, the metrics will be captured for every user actions in real time, these will get aggregated (and averaged) and moved to Aggregated metrics. These will be periodically saved onto file system and synchronized with the service/server. The sync process will be done by another thread/timer based on its settings.</para>@<para>Best possible way to implement these kind of scenarios to use background processes. But as there is a limitation on the timer value (15 mins at the minimum) which can be set to run this process, we used the usual Timer instances; which usually prone to performance problems over time.</para>@<para>This entire implementation and usage is available at http://microsoftcoe.mindtree.com/reuse/packages/kpi/ </para>"
                },
                {
                    "UniqueId": "Group-3-Item-4",
                    "Title": "C#6 Features & Visual Studio 2015",
                    "Subtitle": "Microsoft released .NET 2015 Preview on 12th November 2014 and called it a New Era of .Net as it embraces…",
                    "ImagePath": "Assets/csharp.jpg",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\csharp.jpg</img>@<para>Microsoft released .NET 2015 Preview on 12th November 2014 and called it a New Era of .Net as it embraces open source as a core principal and enables .NET applications to run on multiple operating systems (net on Mac and Linux). It’s the most important announcement in the IT industry since years and maybe even the most impacting one for the coming years in the future. The .NET Compiler platform, codenamed “Roslyn”, is a completely open source platform. “Roslyn” is a new experimental compilers for .Net which adds dynamic compilation and interactive development capabilities to C# and Visual Basic. C# specific features are implemented entirely in the compiler, without any dependency on an updated Microsoft .NET Framework or runtime.</para>@<para>For a couple of weeks I have been exploring on C# 6 features and Visual Studio IDE improvements and its experience in VS2014 CTP (Community Technology Preview) and now in VS2015 after its preview release. Most of the features released in VS2014 CTP are working in VS2015 except for a few maybe features. Still there are many exciting features which makes C# developer’s life much better, easier and makes coding more of a fun.</para>@<para>Just to give the flavor of the new features, I have tried to sum up few points with code snippets in here.</para>@<para>Rich IDE  and Editing Improvements</para>@<para>The new IDE is modern and enhanced with new colorized tooltip, parameter help, which makes the code look much neater and colorful. The new light bulb, the home for the quick actions to operate code fixes and refactoring.</para>@<para>Ex: Remove unused using’s, suggesting code fixes, Implementing interfaces, etc. are the examples of code fixing suggestions offered by the light bulb.</para>@<para>Below snap shows the colorized tool tip and code fixing suggestion by the light bulb.</para>@<img>Assets\\cs1.png</img>@<para>Ex: Refactoring examples include Introduce local, Introduce inline variable, Extract method, and smart renaming features.</para>@<img>Assets\\cs2.png</img>@<para>IDE improvement also extends its support for LINQ and Lambda expressions in Watch and Immediate windows, which is of great help.</para>@<para>C# 6 Features</para>@<para>Coming to C#, the bread and butter of the developers like us, it’s a good news that a lot of language improvements has been brought in with this version release.  Several new C# features reduce a lot of boilerplate code and clutter in everyday code.</para>@<para>Auto-properties Initializers – Auto-properties can be initialized and they no longer require setters. So we can have getter only properties making it read-only.</para>@<img>Assets\\cs3.png</img>@<para>NULL Propagation – Null-conditional operator one of my favorite feature, which helps you avoid getting the most common “NullReferenceException”. This operator (“?.” and “?[].”) gives you a built-in null check while accessing and invoking members and indexers. The null-conditional operator conditionally checks for null before invoking the target method and any additional method within the call chain.</para>@<para>Ex:</para>@<img>Assets\\cs4.png</img>@<para>Expression Bodied Properties and Expression Bodied Functions – Properties and methods can now have a single expression as their body, just like lambdas.</para>@<img>Assets\\cs5.png</img>@<para>String interpolation - String interpolation provides a concise way of describing string templates that insert expressions into format strings.</para>@<img>Assets\\cs6.png</img>@<para>Nameof parameter – It provides a refactoring-safe way of getting the name of a parameter, member or type as a string.</para>@<img>Assets\\cs7.png</img>@<para>Dictionary and Index member Initializer – You can now initialize a Dictionary object and any object supporting an Indexer as a property at specific index.</para>@<img>Assets\\cs8.png</img>@<para>Using Static – Using clauses for static classes bring their static members directly into scope, so you can call for example WriteLine() or Sqrt() without prefixing with the class name.</para>@<img>Assets\\cs9.png</img>@<para>Exception filters – Now you have the choice to look at an exception and decide whether to catch it with a given catch block.</para>@<para>Await inside catch and finally block – Await now works in catch and finally blocks, obviating some very tricky workarounds.</para>@<img>Assets\\cs10.png</img>@<para>Most of these above features are promised to be available for VB.Net as well in the final release, so that they could bring C# and VB.Net languages much closer. Apart from this, there are many more improvements in areas like debugging, Entity framework, Unit testing where, smart Unit testing capabilities with Pex technology, etc., are part of .Net 2015 preview or promised for later releases. I wish if I could include all of the available features here and show it with examples but I have briefly explained the few main ones, however you can download it from here and you can start playing with it and explore more features which the .Net 2015 provides.</para>@<para>References:</para>@<para>http://www.visualstudio.com/en-us/news/vs2015-preview-vs@VSIDE http://www.visualstudio.com/en-us/news/vs2015-preview-vs@ManLang http://blogs.msdn.com/b/visualstudio/archive/2014/11/12/the-c-and-visual-basic-code-focused-ide-experience.aspx </para>"
                },
                {
                    "UniqueId": "Group-3-Item-2",
                    "Title": "Package creation and side loading for WinRT 8.1",
                    "Subtitle": "This article is divided into two parts - creating the Windows 8.1 Application package and the installation of the same.…",
                    "ImagePath": "Assets/package.jpg",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\package.jpg</img>@<para>This article is divided into two parts – creating the Windows 8.1 Application package and the installation of the same.</para>@<para>1. Package creation:</para>@<para>The package can be created right from the Visual Studio or from the command prompt. We will have a look at both the approaches.</para>@<para>Step 1: Build the project/solution under “Release” mode, and then right click on the WinRT project. From the Context menu select “Create App Packages…” under the menu item “Store”. This will open a wizard interface to create a package.</para>@<img>Assets\\pc1.png</img>@<para>Step 2: Choose the appropriate option as per your needs. I’ll be demonstrating on the side loading of the apps, so we aren’t uploading the app to the windows store.</para>@<img>Assets\\pc2.png</img>@<para>Step 3: Verify the version number, Output location and the architecture and hit on “Create” button.</para>@<img>Assets\\pc3.png</img>@<para>Step 4: Once the package is created, you’ll see the below screen with the hyperlinked output location. As an optional step, you can launch the WACK for verifying the package created against the Windows Store rules.</para>@<img>Assets\\pc4.png</img>@<para>The build will be placed under the drop location as:</para>@<img>Assets\\pc5.png</img>@<para>Package any application base data (if any) and ship the package for installation.</para>@<para>If you’re command prompt user, it is much simpler! Just use the below command in your Visual Studio Developer Command Prompt</para>@<para>msbuild //t:Rebuild //p:Configuration=Release;appxPackageDir=<DROP LOCATION> <SOLUTION_FILENAME></para>@<para>For instance, msbuild //t:Rebuild //p:Configuration=Release;appxPackageDir=C:\\Temp_Releases\\ TheHubApp.sln</para>@<para>The build will be placed under the drop location you specify in the command.</para>@<para>2. Side-loading on WinRT 8.1 machine:</para>@<para>For installing the build obtained from the previous section, you can perform the below actions:</para>@<para>Step 1: Uninstall the application on the target machine, if it is already installed.</para>@<para>Step 2: Copy the build package into the target device. Run the “Add-AppDevPackage.ps1″ in administrator mode of the PowerShell console.</para>@<para>Step 3: PowerShell console might prompt you to enter install the certificate/login to your Windows Developer account; performing the necessary actions will resume the installation. Upon installation is successful, you can see similar contents in the PowerShell console.</para>@<img>Assets\\pc6.png</img>@<para>Step 4: Now you can access the installed application either by the Apps screen or by using the Search.</para>@<img>Assets\\pc7.png</img>@<para>Another method of side loading which avoids the developer license (involves group policy and registry edits along with the product key of the OS) requirement is detailed at http://blogs.msdn.com/b/micham/archive/2014/05/30/sideloading-store-apps-to-windows-8-1-devices.aspx </para>"
                }

            ]
        },
        {
            "UniqueId": "Group-5",
            "Title": "Hot Topics",
            "Subtitle": "Group subtitle: 3",
            "ImagePath": "Assets/MediumGray.png",
            "Description": "Group Description: ",
            "Items": [

                {
                    "UniqueId": "Group-3-Item-4",
                    "Title": "C#6 Features & Visual Studio 2015",
                    "Subtitle": "Microsoft released .NET 2015 Preview on 12th November 2014 and called it a New Era of .Net as it embraces…",
                    "ImagePath": "Assets/csharp.jpg",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\csharp.jpg</img>@<para>Microsoft released .NET 2015 Preview on 12th November 2014 and called it a New Era of .Net as it embraces open source as a core principal and enables .NET applications to run on multiple operating systems (net on Mac and Linux). It’s the most important announcement in the IT industry since years and maybe even the most impacting one for the coming years in the future. The .NET Compiler platform, codenamed “Roslyn”, is a completely open source platform. “Roslyn” is a new experimental compilers for .Net which adds dynamic compilation and interactive development capabilities to C# and Visual Basic. C# specific features are implemented entirely in the compiler, without any dependency on an updated Microsoft .NET Framework or runtime.</para>@<para>For a couple of weeks I have been exploring on C# 6 features and Visual Studio IDE improvements and its experience in VS2014 CTP (Community Technology Preview) and now in VS2015 after its preview release. Most of the features released in VS2014 CTP are working in VS2015 except for a few maybe features. Still there are many exciting features which makes C# developer’s life much better, easier and makes coding more of a fun.</para>@<para>Just to give the flavor of the new features, I have tried to sum up few points with code snippets in here.</para>@<para>Rich IDE  and Editing Improvements</para>@<para>The new IDE is modern and enhanced with new colorized tooltip, parameter help, which makes the code look much neater and colorful. The new light bulb, the home for the quick actions to operate code fixes and refactoring.</para>@<para>Ex: Remove unused using’s, suggesting code fixes, Implementing interfaces, etc. are the examples of code fixing suggestions offered by the light bulb.</para>@<para>Below snap shows the colorized tool tip and code fixing suggestion by the light bulb.</para>@<img>Assets\\cs1.png</img>@<para>Ex: Refactoring examples include Introduce local, Introduce inline variable, Extract method, and smart renaming features.</para>@<img>Assets\\cs2.png</img>@<para>IDE improvement also extends its support for LINQ and Lambda expressions in Watch and Immediate windows, which is of great help.</para>@<para>C# 6 Features</para>@<para>Coming to C#, the bread and butter of the developers like us, it’s a good news that a lot of language improvements has been brought in with this version release.  Several new C# features reduce a lot of boilerplate code and clutter in everyday code.</para>@<para>Auto-properties Initializers – Auto-properties can be initialized and they no longer require setters. So we can have getter only properties making it read-only.</para>@<img>Assets\\cs3.png</img>@<para>NULL Propagation – Null-conditional operator one of my favorite feature, which helps you avoid getting the most common “NullReferenceException”. This operator (“?.” and “?[].”) gives you a built-in null check while accessing and invoking members and indexers. The null-conditional operator conditionally checks for null before invoking the target method and any additional method within the call chain.</para>@<para>Ex:</para>@<img>Assets\\cs4.png</img>@<para>Expression Bodied Properties and Expression Bodied Functions – Properties and methods can now have a single expression as their body, just like lambdas.</para>@<img>Assets\\cs5.png</img>@<para>String interpolation - String interpolation provides a concise way of describing string templates that insert expressions into format strings.</para>@<img>Assets\\cs6.png</img>@<para>Nameof parameter – It provides a refactoring-safe way of getting the name of a parameter, member or type as a string.</para>@<img>Assets\\cs7.png</img>@<para>Dictionary and Index member Initializer – You can now initialize a Dictionary object and any object supporting an Indexer as a property at specific index.</para>@<img>Assets\\cs8.png</img>@<para>Using Static – Using clauses for static classes bring their static members directly into scope, so you can call for example WriteLine() or Sqrt() without prefixing with the class name.</para>@<img>Assets\\cs9.png</img>@<para>Exception filters – Now you have the choice to look at an exception and decide whether to catch it with a given catch block.</para>@<para>Await inside catch and finally block – Await now works in catch and finally blocks, obviating some very tricky workarounds.</para>@<img>Assets\\cs10.png</img>@<para>Most of these above features are promised to be available for VB.Net as well in the final release, so that they could bring C# and VB.Net languages much closer. Apart from this, there are many more improvements in areas like debugging, Entity framework, Unit testing where, smart Unit testing capabilities with Pex technology, etc., are part of .Net 2015 preview or promised for later releases. I wish if I could include all of the available features here and show it with examples but I have briefly explained the few main ones, however you can download it from here and you can start playing with it and explore more features which the .Net 2015 provides.</para>@<para>References:</para>@<para>http://www.visualstudio.com/en-us/news/vs2015-preview-vs@VSIDE http://www.visualstudio.com/en-us/news/vs2015-preview-vs@ManLang http://blogs.msdn.com/b/visualstudio/archive/2014/11/12/the-c-and-visual-basic-code-focused-ide-experience.aspx </para>"
                },
                {
                    "UniqueId": "Group-3-Item-1",
                    "Title": "Team Explorer Everywhere",
                    "Subtitle": "Visual Studio Team Foundation Server is good for developers who has a Visual Studio license. This is a statement I…",
                    "ImagePath": "Assets/teamexplorer.png",
                    "Description": "",
                    "Content": "<para>Visual Studio Team Foundation Server is good for developers who has a Visual Studio license” . This is a statement I came to hear recently. With the latest developments in Microsoft technology stack, I would say, this is absolutely wrong. Microsoft has come up with free, lightweight and cross platform client side tools that gives the same out of the box features as in Visual Studio.</para>@<para>Regarding version control, there is one more thing people discuss about a lot- Which version system control to choose. Git is very popular among open source teams and they would like to continue using that. In TFS 2013 two version control systems that the teams can choose from- Git and Team foundation Version Control. Teams have the freedom to choose their version control system within TFS.@<img>Assets\\tfs1.png</img>@<para>What about the license? Obviously, for installing and using TFS on premise a license has to be purchased. I am working on a very small project I can’t afford to install and configure a TFS server on premise, what to do? There is something called Visual Studio Online. It is online home for development projects. More information is available here .Visual Studio Online is free if you have a MSDN subscription.</para>@<para>In an enterprise scenario, where the organization already has Visual Studio Online or on premise, there will be a lot of projects running with different teams using different IDEs and platforms. There is an assumption that TFS can be used only through Visual Studio, which is wrong. It can be used from almost everywhere, without paying for a Visual Studio license. The word ‘almost’ is not really necessary there. Below is a diagram on ‘Adapting TFS Everywhere’ from MSDN documentation.</para>@<img>Assets\\teamexplorer.png</img>@<para>If the developers are using Windows OS in their development machines, they can use Team explorer for Visual Studio free of cost. Team explorer is the client software for TFS that comes with newer versions of Visual Studio. Same client is available separately. It is available for download from Microsoft website. This one runs within the same Visual Studio 2013 Shell. After installation, you can find a Visual Studio installation with the team explorer feature. You can see the following information in Visual Studio ‘About’ screen.</para>@<img>Assets\\tfs3.png</img>@<para>Following screenshot shows the Source control explorer window. You can see that all the options are available.</para>@<img>Assets\\tfs4.png</img>@<para>If the developers are using Eclipse as their IDE, they need not install this team explorer for visual studio. There is another tool called ‘Microsoft Team Explorer Everywhere’. Team Explorer Everywhere includes the Eclipse plug-in and the cross-platform, command-line client for Visual Studio Team Foundation Server 2010, 2012, 2013 and Visual Studio Online. Visit Microsoft Team Explorer Everywhere Download page to for more details.</para>@<para>Following screenshot is from a Linux machine (Ubuntu 14.04 LTS). As you can see, with the Team explorer plugin, all the options are available in Eclipse also</para>@<img>tfs5.png</img>@<para>Following screenshot shows the command line features available in the cross platform, command line tool. All the options available in Team explorer are available in the command line client also. The Microsoft team explorer everywhere download page has listed down the steps for installing and configuring the client.</para>@<img>Assets\\tfs6.png</img>"
                },


                {
                    "UniqueId": "Group-3-Item-3",
                    "Title": "Capturing Analytics in WinRT",
                    "Subtitle": "Since there are no analytics engine (stable versions) built for WinRT (8/8.1); we had a requirement to develop a custom…",
                    "ImagePath": "Assets/Capturing-Analytics-in-WinRT.png",
                    "Description": "Item Description: ",
                    "Content": "<para>Since there are no analytics engine (stable versions) built for WinRT (8/8.1); we had a requirement to develop a custom analytics capturing engine. The initial details were very vague just to detail about the capturing some metrics about usage of the application. Later it was detailed into get the flow of the complete business transaction(s), user activities on the tablet, and even assessing the performance of a page/screen. These data needs to be available for an admin to produce a report and help in finding any performance related problems.</para>@<para>How we implemented?</para>@<para>Since the data doesn’t need to show the metrics to the end user, there were no need to add an admin/report screen to the application. We had just to capture the data and sync with a central database. Now, a service was introduced to get this metrics and push to the central database, from which an admin console will be able to project a graph/report to the Admin. At the application end, now we had to capture all the user activities and send them to the server – which ends up in lots and lots of web calls. Instead of sending data at granular level, these metrics were grouped together based on their event types, and aggregated periodically (for instance – aggregate all events of Home Screen Load time). These aggregated info is then synced to the services periodically – preferably once/twice a day.</para>@<img>Assets\\Capturing-Analytics-in-WinRT.png</img>@<para>As depicted in the above picture, the metrics will be captured for every user actions in real time, these will get aggregated (and averaged) and moved to Aggregated metrics. These will be periodically saved onto file system and synchronized with the service/server. The sync process will be done by another thread/timer based on its settings.</para>@<para>Best possible way to implement these kind of scenarios to use background processes. But as there is a limitation on the timer value (15 mins at the minimum) which can be set to run this process, we used the usual Timer instances; which usually prone to performance problems over time.</para>@<para>This entire implementation and usage is available at http://microsoftcoe.mindtree.com/reuse/packages/kpi/ </para>"
                },

                {
                    "UniqueId": "Group-3-Item-2",
                    "Title": "Package creation and side loading for WinRT 8.1",
                    "Subtitle": "This article is divided into two parts - creating the Windows 8.1 Application package and the installation of the same.…",
                    "ImagePath": "Assets/package.jpg",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\package.jpg</img>@<para>This article is divided into two parts – creating the Windows 8.1 Application package and the installation of the same.</para>@<para>1. Package creation:</para>@<para>The package can be created right from the Visual Studio or from the command prompt. We will have a look at both the approaches.</para>@<para>Step 1: Build the project/solution under “Release” mode, and then right click on the WinRT project. From the Context menu select “Create App Packages…” under the menu item “Store”. This will open a wizard interface to create a package.</para>@<img>Assets\\pc1.png</img>@<para>Step 2: Choose the appropriate option as per your needs. I’ll be demonstrating on the side loading of the apps, so we aren’t uploading the app to the windows store.</para>@<img>Assets\\pc2.png</img>@<para>Step 3: Verify the version number, Output location and the architecture and hit on “Create” button.</para>@<img>Assets\\pc3.png</img>@<para>Step 4: Once the package is created, you’ll see the below screen with the hyperlinked output location. As an optional step, you can launch the WACK for verifying the package created against the Windows Store rules.</para>@<img>Assets\\pc4.png</img>@<para>The build will be placed under the drop location as:</para>@<img>Assets\\pc5.png</img>@<para>Package any application base data (if any) and ship the package for installation.</para>@<para>If you’re command prompt user, it is much simpler! Just use the below command in your Visual Studio Developer Command Prompt</para>@<para>msbuild //t:Rebuild //p:Configuration=Release;appxPackageDir=<DROP LOCATION> <SOLUTION_FILENAME></para>@<para>For instance, msbuild //t:Rebuild //p:Configuration=Release;appxPackageDir=C:\\Temp_Releases\\ TheHubApp.sln</para>@<para>The build will be placed under the drop location you specify in the command.</para>@<para>2. Side-loading on WinRT 8.1 machine:</para>@<para>For installing the build obtained from the previous section, you can perform the below actions:</para>@<para>Step 1: Uninstall the application on the target machine, if it is already installed.</para>@<para>Step 2: Copy the build package into the target device. Run the “Add-AppDevPackage.ps1″ in administrator mode of the PowerShell console.</para>@<para>Step 3: PowerShell console might prompt you to enter install the certificate/login to your Windows Developer account; performing the necessary actions will resume the installation. Upon installation is successful, you can see similar contents in the PowerShell console.</para>@<img>Assets\\pc6.png</img>@<para>Step 4: Now you can access the installed application either by the Apps screen or by using the Search.</para>@<img>Assets\\pc7.png</img>@<para>Another method of side loading which avoids the developer license (involves group policy and registry edits along with the product key of the OS) requirement is detailed at http://blogs.msdn.com/b/micham/archive/2014/05/30/sideloading-store-apps-to-windows-8-1-devices.aspx </para>"
                },
                {
                    "UniqueId": "Group-3-Item-5",
                    "Title": "CASE STUDY: HYBRID CLOUD WINDOWS 8 APPLICATION",
                    "Subtitle": "A leading food manufacturing and supply company has existing mobile/tablet application that will be carried by sales representatives when they…",
                    "ImagePath": "Assets/Cloud.png",
                    "Description": "Item Description: ",
                    "Content": "<img>Assets\\Cloud.png</img>@<para>A leading food manufacturing and supply company has existing mobile/tablet application that will be carried by sales representatives when they meet customers. This application’s main purpose is to get daily updated deals/offers/innovations from the company, customized deals to that particular sales reprehensive and by specific stores assigned to a sales representative. Those deals/offers/innovations can be offered by sales representative when meeting and discussing with his customers.</para>@<para>Problem description/ scope of study:</para>@<para>This application had been developed for windows mobile/tablet as windows store LOB application. Backend data services and data store is on azure with services exposed as an OData services. As the company operations are vast, the daily updates to deals are huge in number. Currently, the implementation is to sync to an offline storage on mobile/tablet’s SQLite database store.</para>@<para>To sync the local storage with all deals and offers from server, and to work offline, app has to make a lot of OData service calls more than 1000 at times. So, usually the syncing time is very long from minimum 60 minutes to several hours.  Due to the long delay sales representatives stayed away from using the application due to which resulted in loosing potential business or not getting much benefit out of the application to improve business.</para>@<para>So, our main task was to make the syncing time low, the usage of application by sales representatives will increase and helps in growth of the company marketing.</para>@<para>Current solution:</para>@<para>The existing architecture can be depicted as shows in the below diagram.</para>@<img>Assets\\hc1.png</img>@<para>Authentication is done with Azure ACS. On success the app on mobile/tablet device makes calls on OData service endpoints, to fetch all the data and then construct local database in SQLite. It completely builds local database for all the deals/offers/innovations. The construction of local DB takes lot of time as it need to go through lot of OData service calls at least minimum to 1000.</para>@<para>Solution implemented:</para>@<para>Solution to core problem:</para>@<para>As a first step, we have moved the task of building SQLite DB from mobile/tablet device to server side. Instead of creating the SQLite DB in mobile/tablet device app, we are now creating it on the server. To construct this, a new “worker role on azure” has been developed. This “worker role” will monitor an Azure queue for messages. Each messages in the queue consists of an employee ID of a sales representative. When a new message comes into the queue, the “worker role” will use the employee ID in the message and builds a SQLite DB which consists all the data regarding promotions/innovations/deals related to the sales representative. Further the SQLite DB is compressed and stored in “Azure Blob storage” (Private account). The queue that the worker role uses is populated by another “worker role” which pushes messages for all the active sales representatives. Hence this process will create a SQLite file for all of the Sales representative. This will speed up the process as the mobile/table application will just have to download SQLite DB and used to for further processing.</para>@<para>Additional things implemented other than core solution:</para>@<para>Security</para>@<para>With this new design to solve the problem, we entered in to an issue with security to specify how an account will download the SQLite data file from “Blog storage on Azure”, and to restrict any other users download someone else’s files. We need to secure and restrict it to each sales representative. To solve the problem, we made it mandatory to send some security token from mobile/tablet app along with request. The SAS (service to issue and authenticated security tokens) have been kept in place to issue security tokens. We have enforced business rules to specify who can access which file through SAS.  When mobile requesting for a file blob file, it sends the security token.</para>@<para>Monitoring and alerts for exceptions and logs</para>@<para>Exceptions from all areas of the application were logged and kept in two storages. 1. Azure AWD tables 2. Queue. The queue will be monitored by a “Worker Role on Azure” to checks important and alert-able exceptions/logs. If worker role finds any such expectations/logs, it logs to Azure AWD table and will periodically sends report to admin as configured.</para>@<img>Assets\\hc2.png</img>@<para>Major components developed/used on azure for new solution:</para>@<para>Worker Role – to create SQLite data files, populate the queue</para>@<para>Azure Queue for parallel processing</para>@<para>Blob storage</para>@<para>SAS (Shared Access Signature) service</para>@<para>Queue for exception messages and logs</para>@<para>Worker Role – to monitor exception messages queue and alerting admin.</para>@<para>Observations as a success factor:</para>@<para>The redesign of the application reduced the sync time considerable. Scalability increased as the application was designed to scale with help of Azure. Complete potential of Azure PAAS offering was tapped to achieve optimal performance. Robustness was imparted to the system with integrated monitoring and logging and also by code refactoring. The application and the overall system had become more reliable and predictable with help of the alerts</para>"
                }
            ]
        },
        {
            "UniqueId": "Group-6",
            "Title": "",
            "Subtitle": "Group subtitle: 6",
            "ImagePath": "Assets/MediumGray.png",
            "Description": "Group Description: ",
            "Items": [
                {
                    "UniqueId": "Group-6-Item-3",
                    "Title": "News",
                    "Subtitle": "Item Subtitle: 3",
                    "ImagePath": "Assets/LightGray.png",
                    "Description": "Item Description: ",
                    "Content": "Group-4"
                },
                {
                    "UniqueId": "Group-6-Item-2",
                    "Title": "Hot Topics",
                    "Subtitle": "Item Subtitle: 2",
                    "ImagePath": "Assets/MediumGray.png",
                    "Description": "Item Description: ",
                    "Content": "Group-5"
                },
                {
                    "UniqueId": "Group-6-Item-1",
                    "Title": "Tech Blogs",
                    "Subtitle": "Item Subtitle: 1",
                    "ImagePath": "Assets/MediumGray.png",
                    "Description": "Item Description:",
                    "Content": "Group-3"
                },

                {
                    "UniqueId": "Group-6-Item-4",
                    "Title": "Employee Login",
                    "Subtitle": "Item Subtitle: 4",
                    "ImagePath": "Assets/DarkGray.png",
                    "Description": "Item Description: ",
                    "Content": "Group-6"
                }
            ]
        }
    ]
}
